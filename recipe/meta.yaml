{% set name = "coin-or-osi" %}
{% set version = "0.108.11" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/coin-or/Osi/archive/releases/{{ version }}.tar.gz
  sha256: 1063b6a057e80222e2ede3ef0c73c0c54697e0fee1d913e2bef530310c13a670
  patches:
    - 0001-Patch-for-downstream.patch

build:
  number: 4
  run_exports:
    - {{ pin_subpackage(name, min_pin='x.x', max_pin='x.x') }}
    - mkl-static  # [win]

requirements:
  build:
    - gnuconfig  # [unix]
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}  # [unix]
    - pkg-config  # [unix]
    - make  # [unix]
    - m2-make  # [win]
    - m2-pkg-config  # [win]
    - m2-grep  # [win]
    - m2-sed  # [win]
    - m2-bash  # [win]
    - m2-base  # [win]
  host:
    - coin-or-utils
    - blas-devel
    - libblas  # [unix]
    - libcblas  # [unix]
    - liblapack  # [unix]
    - liblapacke  # [unix]
    - mkl-static  # [win]
    - zlib
    - bzip2
  run_constrained:
    - coincbc * *_metapackage

test:
  commands:
    - test -f $PREFIX/lib/libOsi${SHLIB_EXT}  # [unix]
    - test -f $PREFIX/include/coin/OsiConfig.h  # [unix]
    - if not exist %LIBRARY_LIB%/libOsi.lib exit 1  # [win]
    - if not exist %LIBRARY_INC%/coin/OsiConfig.h exit 1  # [win]


about:
  home: https://github.com/coin-or/Osi
  dev_url: https://github.com/coin-or/Osi
  license: EPL-2.0
  license_family: OTHER
  license_file: LICENSE
  summary: Coin OR Open Solver Interface (OSI)
  description: |
    Osi (Open Solver Interface) provides an abstract base class to a generic
    linear programming (LP) solver, along with derived classes for specific
    solvers. Many applications may be able to use the Osi to insulate themselves
    from a specific LP solver. That is, programs written to the OSI standard may
    be linked to any solver with an OSI interface and should produce correct
    results. The OSI has been significantly extended compared to its first
    incarnation. Currently, the OSI supports linear programming solvers and has
    rudimentary support for integer programming. Among others the following
    operations are supported:

      - creating the LP formulation;
      - directly modifying the formulation by adding rows/columns;
      - modifying the formulation by adding cutting planes provided by CGL;
      - solving the formulation (and resolving after modifications);
      - extracting solution information;
      - invoking the underlying solver's branch-and-bound component.

extra:
  recipe-maintainers:
    - wolfv
    - tkralphs
    - jschueller
